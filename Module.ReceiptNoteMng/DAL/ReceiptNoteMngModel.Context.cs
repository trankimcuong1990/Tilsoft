//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Module.ReceiptNoteMng.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ReceiptNoteMngEntities : DbContext
    {
        public ReceiptNoteMngEntities()
            : base("name=ReceiptNoteMngEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<PurchasingInvoice> PurchasingInvoice { get; set; }
        public virtual DbSet<ReceiptNoteInvoice> ReceiptNoteInvoice { get; set; }
        public virtual DbSet<ReceiptNoteMng_MasterExchangeRate_View> ReceiptNoteMng_MasterExchangeRate_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_ReceiptNoteInvoiceEdit_View> ReceiptNoteMng_ReceiptNoteInvoiceEdit_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_SupportClientSearch_View> ReceiptNoteMng_SupportClientSearch_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_SupportPurchasingInvoiceSearch_View> ReceiptNoteMng_SupportPurchasingInvoiceSearch_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_SupportReceiptNoteItemType_View> ReceiptNoteMng_SupportReceiptNoteItemType_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_SupportReceiptNoteType_View> ReceiptNoteMng_SupportReceiptNoteType_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_SupportReceiveType_View> ReceiptNoteMng_SupportReceiveType_View { get; set; }
        public virtual DbSet<ReceiptNote> ReceiptNote { get; set; }
        public virtual DbSet<ReceiptNoteMng_ReceiptNoteEdit_View> ReceiptNoteMng_ReceiptNoteEdit_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_ReceiptNoteSearch_View> ReceiptNoteMng_ReceiptNoteSearch_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_Support_SupplierBank_View> ReceiptNoteMng_Support_SupplierBank_View { get; set; }
        public virtual DbSet<ReceiptNoteSaleInvoice> ReceiptNoteSaleInvoice { get; set; }
        public virtual DbSet<ReceiptNoteMng_ReceiptNoteSaleInvoiceEdit_View> ReceiptNoteMng_ReceiptNoteSaleInvoiceEdit_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_SupportFactorySaleInvoiceSearch_View> ReceiptNoteMng_SupportFactorySaleInvoiceSearch_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_SupportFactoryRawMaterialSearch_View> ReceiptNoteMng_SupportFactoryRawMaterialSearch_View { get; set; }
        public virtual DbSet<ReceiptNoteClient> ReceiptNoteClient { get; set; }
        public virtual DbSet<ReceiptNoteMng_ReceiptNoteClientEdit_View> ReceiptNoteMng_ReceiptNoteClientEdit_View { get; set; }
        public virtual DbSet<ReceiptNoteOther> ReceiptNoteOther { get; set; }
        public virtual DbSet<ReceiptNoteMng_ReceiptNoteOtherEdit_View> ReceiptNoteMng_ReceiptNoteOtherEdit_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_SupportEmployeeSearch_View> ReceiptNoteMng_SupportEmployeeSearch_View { get; set; }
        public virtual DbSet<ReceiptNoteMng_SupportProductionItemSearch_View> ReceiptNoteMng_SupportProductionItemSearch_View { get; set; }
    
        public virtual ObjectResult<ReceiptNoteMng_SupportPurchasingInvoiceSearch_View> ReceiptNoteMng_Function_SearchPurchasingInvoice(Nullable<int> clientID, string invoiceNo, Nullable<System.DateTime> invoiceDate, string sortedBy, string sortedDirection)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptNoteMng_SupportPurchasingInvoiceSearch_View>("ReceiptNoteMng_Function_SearchPurchasingInvoice", clientIDParameter, invoiceNoParameter, invoiceDateParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<ReceiptNoteMng_SupportPurchasingInvoiceSearch_View> ReceiptNoteMng_Function_SearchPurchasingInvoice(Nullable<int> clientID, string invoiceNo, Nullable<System.DateTime> invoiceDate, string sortedBy, string sortedDirection, MergeOption mergeOption)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptNoteMng_SupportPurchasingInvoiceSearch_View>("ReceiptNoteMng_Function_SearchPurchasingInvoice", mergeOption, clientIDParameter, invoiceNoParameter, invoiceDateParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<ReceiptNoteMn_function_GetSupplier_Result> ReceiptNoteMn_function_GetSupplier(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptNoteMn_function_GetSupplier_Result>("ReceiptNoteMn_function_GetSupplier", userIDParameter);
        }
    
        public virtual ObjectResult<ReceiptNoteMng_ReceiptNoteSearch_View> ReceiptNoteMng_Function_SearchResult(string receiptNoteNo, Nullable<System.DateTime> receiptNoteDate, Nullable<System.DateTime> postingDate, string receiverName, Nullable<int> statusID, Nullable<int> receiptNoteTypeID, string sortedBy, string sortedDirection)
        {
            var receiptNoteNoParameter = receiptNoteNo != null ?
                new ObjectParameter("ReceiptNoteNo", receiptNoteNo) :
                new ObjectParameter("ReceiptNoteNo", typeof(string));
    
            var receiptNoteDateParameter = receiptNoteDate.HasValue ?
                new ObjectParameter("ReceiptNoteDate", receiptNoteDate) :
                new ObjectParameter("ReceiptNoteDate", typeof(System.DateTime));
    
            var postingDateParameter = postingDate.HasValue ?
                new ObjectParameter("PostingDate", postingDate) :
                new ObjectParameter("PostingDate", typeof(System.DateTime));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var receiptNoteTypeIDParameter = receiptNoteTypeID.HasValue ?
                new ObjectParameter("ReceiptNoteTypeID", receiptNoteTypeID) :
                new ObjectParameter("ReceiptNoteTypeID", typeof(int));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptNoteMng_ReceiptNoteSearch_View>("ReceiptNoteMng_Function_SearchResult", receiptNoteNoParameter, receiptNoteDateParameter, postingDateParameter, receiverNameParameter, statusIDParameter, receiptNoteTypeIDParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<ReceiptNoteMng_ReceiptNoteSearch_View> ReceiptNoteMng_Function_SearchResult(string receiptNoteNo, Nullable<System.DateTime> receiptNoteDate, Nullable<System.DateTime> postingDate, string receiverName, Nullable<int> statusID, Nullable<int> receiptNoteTypeID, string sortedBy, string sortedDirection, MergeOption mergeOption)
        {
            var receiptNoteNoParameter = receiptNoteNo != null ?
                new ObjectParameter("ReceiptNoteNo", receiptNoteNo) :
                new ObjectParameter("ReceiptNoteNo", typeof(string));
    
            var receiptNoteDateParameter = receiptNoteDate.HasValue ?
                new ObjectParameter("ReceiptNoteDate", receiptNoteDate) :
                new ObjectParameter("ReceiptNoteDate", typeof(System.DateTime));
    
            var postingDateParameter = postingDate.HasValue ?
                new ObjectParameter("PostingDate", postingDate) :
                new ObjectParameter("PostingDate", typeof(System.DateTime));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var receiptNoteTypeIDParameter = receiptNoteTypeID.HasValue ?
                new ObjectParameter("ReceiptNoteTypeID", receiptNoteTypeID) :
                new ObjectParameter("ReceiptNoteTypeID", typeof(int));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptNoteMng_ReceiptNoteSearch_View>("ReceiptNoteMng_Function_SearchResult", mergeOption, receiptNoteNoParameter, receiptNoteDateParameter, postingDateParameter, receiverNameParameter, statusIDParameter, receiptNoteTypeIDParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<ReceiptNoteMng_SupportFactorySaleInvoiceSearch_View> ReceiptNoteMng_Function_SearchFactorySaleInvoice(Nullable<int> supplierID, string invoiceNo, Nullable<System.DateTime> invoiceDate, string docCode, string sortedBy, string sortedDirection)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var docCodeParameter = docCode != null ?
                new ObjectParameter("DocCode", docCode) :
                new ObjectParameter("DocCode", typeof(string));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptNoteMng_SupportFactorySaleInvoiceSearch_View>("ReceiptNoteMng_Function_SearchFactorySaleInvoice", supplierIDParameter, invoiceNoParameter, invoiceDateParameter, docCodeParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<ReceiptNoteMng_SupportFactorySaleInvoiceSearch_View> ReceiptNoteMng_Function_SearchFactorySaleInvoice(Nullable<int> supplierID, string invoiceNo, Nullable<System.DateTime> invoiceDate, string docCode, string sortedBy, string sortedDirection, MergeOption mergeOption)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var docCodeParameter = docCode != null ?
                new ObjectParameter("DocCode", docCode) :
                new ObjectParameter("DocCode", typeof(string));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptNoteMng_SupportFactorySaleInvoiceSearch_View>("ReceiptNoteMng_Function_SearchFactorySaleInvoice", mergeOption, supplierIDParameter, invoiceNoParameter, invoiceDateParameter, docCodeParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<ReceiptNoteMng_SupportEmployeeSearch_View> ReceiptNoteMng_Function_SearchEmployee(string employee)
        {
            var employeeParameter = employee != null ?
                new ObjectParameter("Employee", employee) :
                new ObjectParameter("Employee", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptNoteMng_SupportEmployeeSearch_View>("ReceiptNoteMng_Function_SearchEmployee", employeeParameter);
        }
    
        public virtual ObjectResult<ReceiptNoteMng_SupportEmployeeSearch_View> ReceiptNoteMng_Function_SearchEmployee(string employee, MergeOption mergeOption)
        {
            var employeeParameter = employee != null ?
                new ObjectParameter("Employee", employee) :
                new ObjectParameter("Employee", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptNoteMng_SupportEmployeeSearch_View>("ReceiptNoteMng_Function_SearchEmployee", mergeOption, employeeParameter);
        }
    }
}
