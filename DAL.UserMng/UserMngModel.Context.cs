//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.UserMng
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UserMngEntities : DbContext
    {
        public UserMngEntities()
            : base("name=UserMngEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<UserFactoryAccess> UserFactoryAccess { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }
        public virtual DbSet<UserMng_UserFactoryAccess_View> UserMng_UserFactoryAccess_View { get; set; }
        public virtual DbSet<UserMng_UserProfile_View> UserMng_UserProfile_View { get; set; }
        public virtual DbSet<UserMng_UserProfileSearchResult_View> UserMng_UserProfileSearchResult_View { get; set; }
        public virtual DbSet<UserPermission> UserPermission { get; set; }
        public virtual DbSet<UserMng_UserPermission_View> UserMng_UserPermission_View { get; set; }
        public virtual DbSet<UserMng_UserGroupPermission_View> UserMng_UserGroupPermission_View { get; set; }
    
        public virtual ObjectResult<UserMng_UserProfileSearchResult_View> UserMng_function_SearchUserProfile(string userName, string userUD, string fullName, Nullable<int> userGroupID, string phoneNumber, string email, string skypeID, Nullable<int> officeID, Nullable<bool> isActivated, string sortedBy, string sortedDirection)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userUDParameter = userUD != null ?
                new ObjectParameter("UserUD", userUD) :
                new ObjectParameter("UserUD", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var skypeIDParameter = skypeID != null ?
                new ObjectParameter("SkypeID", skypeID) :
                new ObjectParameter("SkypeID", typeof(string));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var isActivatedParameter = isActivated.HasValue ?
                new ObjectParameter("IsActivated", isActivated) :
                new ObjectParameter("IsActivated", typeof(bool));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserMng_UserProfileSearchResult_View>("UserMng_function_SearchUserProfile", userNameParameter, userUDParameter, fullNameParameter, userGroupIDParameter, phoneNumberParameter, emailParameter, skypeIDParameter, officeIDParameter, isActivatedParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<UserMng_UserProfileSearchResult_View> UserMng_function_SearchUserProfile(string userName, string userUD, string fullName, Nullable<int> userGroupID, string phoneNumber, string email, string skypeID, Nullable<int> officeID, Nullable<bool> isActivated, string sortedBy, string sortedDirection, MergeOption mergeOption)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userUDParameter = userUD != null ?
                new ObjectParameter("UserUD", userUD) :
                new ObjectParameter("UserUD", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var skypeIDParameter = skypeID != null ?
                new ObjectParameter("SkypeID", skypeID) :
                new ObjectParameter("SkypeID", typeof(string));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("OfficeID", officeID) :
                new ObjectParameter("OfficeID", typeof(int));
    
            var isActivatedParameter = isActivated.HasValue ?
                new ObjectParameter("IsActivated", isActivated) :
                new ObjectParameter("IsActivated", typeof(bool));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserMng_UserProfileSearchResult_View>("UserMng_function_SearchUserProfile", mergeOption, userNameParameter, userUDParameter, fullNameParameter, userGroupIDParameter, phoneNumberParameter, emailParameter, skypeIDParameter, officeIDParameter, isActivatedParameter, sortedByParameter, sortedDirectionParameter);
        }
    }
}
