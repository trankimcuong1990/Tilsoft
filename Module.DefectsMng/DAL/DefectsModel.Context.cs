//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Module.DefectsMng.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DefectsEntities : DbContext
    {
        public DefectsEntities()
            : base("name=DefectsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Defects> Defects { get; set; }
        public virtual DbSet<DefectsGroupMng_DefectsGroup_View> DefectsGroupMng_DefectsGroup_View { get; set; }
        public virtual DbSet<Support_TypeOfDefects_View> Support_TypeOfDefects_View { get; set; }
        public virtual DbSet<DefectsMng_Defects_View> DefectsMng_Defects_View { get; set; }
        public virtual DbSet<DefectsImage> DefectsImage { get; set; }
        public virtual DbSet<DefectsMng_DefectsImage_View> DefectsMng_DefectsImage_View { get; set; }
        public virtual DbSet<DefectsMng_Defects_SearchView> DefectsMng_Defects_SearchView { get; set; }
    
        public virtual ObjectResult<DefectsMng_Defects_SearchView> DefectsMng_function_DefectsSearchResult(string defectUD, string defectNM, string defectName, string typeOfDefectNameA, string typeOfDefectNameB, string typeOfDefectNameC, Nullable<int> defectA, Nullable<int> defectB, Nullable<int> defectC, Nullable<int> defectGroupID, string sortedBy, string sortedDirection)
        {
            var defectUDParameter = defectUD != null ?
                new ObjectParameter("DefectUD", defectUD) :
                new ObjectParameter("DefectUD", typeof(string));
    
            var defectNMParameter = defectNM != null ?
                new ObjectParameter("DefectNM", defectNM) :
                new ObjectParameter("DefectNM", typeof(string));
    
            var defectNameParameter = defectName != null ?
                new ObjectParameter("DefectName", defectName) :
                new ObjectParameter("DefectName", typeof(string));
    
            var typeOfDefectNameAParameter = typeOfDefectNameA != null ?
                new ObjectParameter("TypeOfDefectNameA", typeOfDefectNameA) :
                new ObjectParameter("TypeOfDefectNameA", typeof(string));
    
            var typeOfDefectNameBParameter = typeOfDefectNameB != null ?
                new ObjectParameter("TypeOfDefectNameB", typeOfDefectNameB) :
                new ObjectParameter("TypeOfDefectNameB", typeof(string));
    
            var typeOfDefectNameCParameter = typeOfDefectNameC != null ?
                new ObjectParameter("TypeOfDefectNameC", typeOfDefectNameC) :
                new ObjectParameter("TypeOfDefectNameC", typeof(string));
    
            var defectAParameter = defectA.HasValue ?
                new ObjectParameter("DefectA", defectA) :
                new ObjectParameter("DefectA", typeof(int));
    
            var defectBParameter = defectB.HasValue ?
                new ObjectParameter("DefectB", defectB) :
                new ObjectParameter("DefectB", typeof(int));
    
            var defectCParameter = defectC.HasValue ?
                new ObjectParameter("DefectC", defectC) :
                new ObjectParameter("DefectC", typeof(int));
    
            var defectGroupIDParameter = defectGroupID.HasValue ?
                new ObjectParameter("DefectGroupID", defectGroupID) :
                new ObjectParameter("DefectGroupID", typeof(int));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DefectsMng_Defects_SearchView>("DefectsMng_function_DefectsSearchResult", defectUDParameter, defectNMParameter, defectNameParameter, typeOfDefectNameAParameter, typeOfDefectNameBParameter, typeOfDefectNameCParameter, defectAParameter, defectBParameter, defectCParameter, defectGroupIDParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<DefectsMng_Defects_SearchView> DefectsMng_function_DefectsSearchResult(string defectUD, string defectNM, string defectName, string typeOfDefectNameA, string typeOfDefectNameB, string typeOfDefectNameC, Nullable<int> defectA, Nullable<int> defectB, Nullable<int> defectC, Nullable<int> defectGroupID, string sortedBy, string sortedDirection, MergeOption mergeOption)
        {
            var defectUDParameter = defectUD != null ?
                new ObjectParameter("DefectUD", defectUD) :
                new ObjectParameter("DefectUD", typeof(string));
    
            var defectNMParameter = defectNM != null ?
                new ObjectParameter("DefectNM", defectNM) :
                new ObjectParameter("DefectNM", typeof(string));
    
            var defectNameParameter = defectName != null ?
                new ObjectParameter("DefectName", defectName) :
                new ObjectParameter("DefectName", typeof(string));
    
            var typeOfDefectNameAParameter = typeOfDefectNameA != null ?
                new ObjectParameter("TypeOfDefectNameA", typeOfDefectNameA) :
                new ObjectParameter("TypeOfDefectNameA", typeof(string));
    
            var typeOfDefectNameBParameter = typeOfDefectNameB != null ?
                new ObjectParameter("TypeOfDefectNameB", typeOfDefectNameB) :
                new ObjectParameter("TypeOfDefectNameB", typeof(string));
    
            var typeOfDefectNameCParameter = typeOfDefectNameC != null ?
                new ObjectParameter("TypeOfDefectNameC", typeOfDefectNameC) :
                new ObjectParameter("TypeOfDefectNameC", typeof(string));
    
            var defectAParameter = defectA.HasValue ?
                new ObjectParameter("DefectA", defectA) :
                new ObjectParameter("DefectA", typeof(int));
    
            var defectBParameter = defectB.HasValue ?
                new ObjectParameter("DefectB", defectB) :
                new ObjectParameter("DefectB", typeof(int));
    
            var defectCParameter = defectC.HasValue ?
                new ObjectParameter("DefectC", defectC) :
                new ObjectParameter("DefectC", typeof(int));
    
            var defectGroupIDParameter = defectGroupID.HasValue ?
                new ObjectParameter("DefectGroupID", defectGroupID) :
                new ObjectParameter("DefectGroupID", typeof(int));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DefectsMng_Defects_SearchView>("DefectsMng_function_DefectsSearchResult", mergeOption, defectUDParameter, defectNMParameter, defectNameParameter, typeOfDefectNameAParameter, typeOfDefectNameBParameter, typeOfDefectNameCParameter, defectAParameter, defectBParameter, defectCParameter, defectGroupIDParameter, sortedByParameter, sortedDirectionParameter);
        }
    }
}
