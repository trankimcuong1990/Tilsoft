//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Module.OutsourcingCostRpt.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OutsourcingCostRptEntities : DbContext
    {
        public OutsourcingCostRptEntities()
            : base("name=OutsourcingCostRptEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<SupportMng_ProductionTeam_View> SupportMng_ProductionTeam_View { get; set; }
    
        public virtual ObjectResult<OutsourcingCostRpt_Function_GetReport_Result> OutsourcingCostRpt_Function_GetReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> workCenterID, Nullable<int> clientID, Nullable<int> productionTeamID, Nullable<bool> isOutsource)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var productionTeamIDParameter = productionTeamID.HasValue ?
                new ObjectParameter("ProductionTeamID", productionTeamID) :
                new ObjectParameter("ProductionTeamID", typeof(int));
    
            var isOutsourceParameter = isOutsource.HasValue ?
                new ObjectParameter("IsOutsource", isOutsource) :
                new ObjectParameter("IsOutsource", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OutsourcingCostRpt_Function_GetReport_Result>("OutsourcingCostRpt_Function_GetReport", fromDateParameter, toDateParameter, workCenterIDParameter, clientIDParameter, productionTeamIDParameter, isOutsourceParameter);
        }
    
        public virtual ObjectResult<OutsourcingCostRpt_Function_GetReportDetail_Result> OutsourcingCostRpt_Function_GetReportDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> workCenterID, Nullable<int> clientID, Nullable<int> productionTeamID, Nullable<bool> isOutsource)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var productionTeamIDParameter = productionTeamID.HasValue ?
                new ObjectParameter("ProductionTeamID", productionTeamID) :
                new ObjectParameter("ProductionTeamID", typeof(int));
    
            var isOutsourceParameter = isOutsource.HasValue ?
                new ObjectParameter("IsOutsource", isOutsource) :
                new ObjectParameter("IsOutsource", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OutsourcingCostRpt_Function_GetReportDetail_Result>("OutsourcingCostRpt_Function_GetReportDetail", fromDateParameter, toDateParameter, workCenterIDParameter, clientIDParameter, productionTeamIDParameter, isOutsourceParameter);
        }
    }
}
