//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Module.CushionTestingMng.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CushionTestingMngEntities : DbContext
    {
        public CushionTestingMngEntities()
            : base("name=CushionTestingMngEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CushionTestReport> CushionTestReport { get; set; }
        public virtual DbSet<CushionTestReportFile> CushionTestReportFile { get; set; }
        public virtual DbSet<CushionTestReportUsingCushionStandard> CushionTestReportUsingCushionStandard { get; set; }
        public virtual DbSet<CushionTestingMng_CushionColor_View> CushionTestingMng_CushionColor_View { get; set; }
        public virtual DbSet<CushionTestingMng_CushionTestReport_OverView> CushionTestingMng_CushionTestReport_OverView { get; set; }
        public virtual DbSet<CushionTestingMng_CushionTestReport_View> CushionTestingMng_CushionTestReport_View { get; set; }
        public virtual DbSet<CushionTestingMng_CushionTestReportFile_OverView> CushionTestingMng_CushionTestReportFile_OverView { get; set; }
        public virtual DbSet<CushionTestingMng_CushionTestReportFile_SearchView> CushionTestingMng_CushionTestReportFile_SearchView { get; set; }
        public virtual DbSet<CushionTestingMng_CushionTestReportFile_View> CushionTestingMng_CushionTestReportFile_View { get; set; }
        public virtual DbSet<CushionTestingMng_CushionTestStandard_OverView> CushionTestingMng_CushionTestStandard_OverView { get; set; }
        public virtual DbSet<CushionTestingMng_CushionTestStandard_SearchView> CushionTestingMng_CushionTestStandard_SearchView { get; set; }
        public virtual DbSet<CushionTestingMng_CushionTestStandard_View> CushionTestingMng_CushionTestStandard_View { get; set; }
        public virtual DbSet<SupportMng_CushionTestStandard_View> SupportMng_CushionTestStandard_View { get; set; }
        public virtual DbSet<CushionTestingMng_CushionTestReport_SearchView> CushionTestingMng_CushionTestReport_SearchView { get; set; }
    
        public virtual ObjectResult<CushionTestingMng_CushionColor_View> CushionTestingMng_function_CushionColor(string searchString)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CushionTestingMng_CushionColor_View>("CushionTestingMng_function_CushionColor", searchStringParameter);
        }
    
        public virtual ObjectResult<CushionTestingMng_CushionColor_View> CushionTestingMng_function_CushionColor(string searchString, MergeOption mergeOption)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CushionTestingMng_CushionColor_View>("CushionTestingMng_function_CushionColor", mergeOption, searchStringParameter);
        }
    
        public virtual ObjectResult<CushionTestingMng_CushionTestReport_SearchView> CushionTestingMng_function_SearchCushionTesting(string cushionTestReportUD, Nullable<bool> isEnabled, string cushionColorUD, string cushionColorNM, string clientNM, string friendlyName, string testStandardNM, Nullable<System.DateTime> testDate, string sortedBy, string sortedDirection)
        {
            var cushionTestReportUDParameter = cushionTestReportUD != null ?
                new ObjectParameter("CushionTestReportUD", cushionTestReportUD) :
                new ObjectParameter("CushionTestReportUD", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var cushionColorUDParameter = cushionColorUD != null ?
                new ObjectParameter("CushionColorUD", cushionColorUD) :
                new ObjectParameter("CushionColorUD", typeof(string));
    
            var cushionColorNMParameter = cushionColorNM != null ?
                new ObjectParameter("CushionColorNM", cushionColorNM) :
                new ObjectParameter("CushionColorNM", typeof(string));
    
            var clientNMParameter = clientNM != null ?
                new ObjectParameter("ClientNM", clientNM) :
                new ObjectParameter("ClientNM", typeof(string));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var testStandardNMParameter = testStandardNM != null ?
                new ObjectParameter("TestStandardNM", testStandardNM) :
                new ObjectParameter("TestStandardNM", typeof(string));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("TestDate", testDate) :
                new ObjectParameter("TestDate", typeof(System.DateTime));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CushionTestingMng_CushionTestReport_SearchView>("CushionTestingMng_function_SearchCushionTesting", cushionTestReportUDParameter, isEnabledParameter, cushionColorUDParameter, cushionColorNMParameter, clientNMParameter, friendlyNameParameter, testStandardNMParameter, testDateParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<CushionTestingMng_CushionTestReport_SearchView> CushionTestingMng_function_SearchCushionTesting(string cushionTestReportUD, Nullable<bool> isEnabled, string cushionColorUD, string cushionColorNM, string clientNM, string friendlyName, string testStandardNM, Nullable<System.DateTime> testDate, string sortedBy, string sortedDirection, MergeOption mergeOption)
        {
            var cushionTestReportUDParameter = cushionTestReportUD != null ?
                new ObjectParameter("CushionTestReportUD", cushionTestReportUD) :
                new ObjectParameter("CushionTestReportUD", typeof(string));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var cushionColorUDParameter = cushionColorUD != null ?
                new ObjectParameter("CushionColorUD", cushionColorUD) :
                new ObjectParameter("CushionColorUD", typeof(string));
    
            var cushionColorNMParameter = cushionColorNM != null ?
                new ObjectParameter("CushionColorNM", cushionColorNM) :
                new ObjectParameter("CushionColorNM", typeof(string));
    
            var clientNMParameter = clientNM != null ?
                new ObjectParameter("ClientNM", clientNM) :
                new ObjectParameter("ClientNM", typeof(string));
    
            var friendlyNameParameter = friendlyName != null ?
                new ObjectParameter("FriendlyName", friendlyName) :
                new ObjectParameter("FriendlyName", typeof(string));
    
            var testStandardNMParameter = testStandardNM != null ?
                new ObjectParameter("TestStandardNM", testStandardNM) :
                new ObjectParameter("TestStandardNM", typeof(string));
    
            var testDateParameter = testDate.HasValue ?
                new ObjectParameter("TestDate", testDate) :
                new ObjectParameter("TestDate", typeof(System.DateTime));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CushionTestingMng_CushionTestReport_SearchView>("CushionTestingMng_function_SearchCushionTesting", mergeOption, cushionTestReportUDParameter, isEnabledParameter, cushionColorUDParameter, cushionColorNMParameter, clientNMParameter, friendlyNameParameter, testStandardNMParameter, testDateParameter, sortedByParameter, sortedDirectionParameter);
        }
    }
}
