//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Module.AnnualLeaveRpt.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AnnualLeaveRptEntities : DbContext
    {
        public AnnualLeaveRptEntities()
            : base("name=AnnualLeaveRptEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AnnualLeaveRpt_Employee_View> AnnualLeaveRpt_Employee_View { get; set; }
        public virtual DbSet<AnnualLeaveRpt_Company_View> AnnualLeaveRpt_Company_View { get; set; }
        public virtual DbSet<AnnualLeaveRpt_AnnualLeaveTracking_View> AnnualLeaveRpt_AnnualLeaveTracking_View { get; set; }
    
        public virtual ObjectResult<AnnualLeaveRpt_AnnualLeaveTracking_View> AnnualLeaveRpt_function_SearchAnnualLeave(string employeeNM, Nullable<int> companyID, Nullable<int> affectedYear, Nullable<bool> hasleft, string sortedBy, string sortedDirection)
        {
            var employeeNMParameter = employeeNM != null ?
                new ObjectParameter("EmployeeNM", employeeNM) :
                new ObjectParameter("EmployeeNM", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var affectedYearParameter = affectedYear.HasValue ?
                new ObjectParameter("AffectedYear", affectedYear) :
                new ObjectParameter("AffectedYear", typeof(int));
    
            var hasleftParameter = hasleft.HasValue ?
                new ObjectParameter("Hasleft", hasleft) :
                new ObjectParameter("Hasleft", typeof(bool));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnnualLeaveRpt_AnnualLeaveTracking_View>("AnnualLeaveRpt_function_SearchAnnualLeave", employeeNMParameter, companyIDParameter, affectedYearParameter, hasleftParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<AnnualLeaveRpt_AnnualLeaveTracking_View> AnnualLeaveRpt_function_SearchAnnualLeave(string employeeNM, Nullable<int> companyID, Nullable<int> affectedYear, Nullable<bool> hasleft, string sortedBy, string sortedDirection, MergeOption mergeOption)
        {
            var employeeNMParameter = employeeNM != null ?
                new ObjectParameter("EmployeeNM", employeeNM) :
                new ObjectParameter("EmployeeNM", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var affectedYearParameter = affectedYear.HasValue ?
                new ObjectParameter("AffectedYear", affectedYear) :
                new ObjectParameter("AffectedYear", typeof(int));
    
            var hasleftParameter = hasleft.HasValue ?
                new ObjectParameter("Hasleft", hasleft) :
                new ObjectParameter("Hasleft", typeof(bool));
    
            var sortedByParameter = sortedBy != null ?
                new ObjectParameter("SortedBy", sortedBy) :
                new ObjectParameter("SortedBy", typeof(string));
    
            var sortedDirectionParameter = sortedDirection != null ?
                new ObjectParameter("SortedDirection", sortedDirection) :
                new ObjectParameter("SortedDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnnualLeaveRpt_AnnualLeaveTracking_View>("AnnualLeaveRpt_function_SearchAnnualLeave", mergeOption, employeeNMParameter, companyIDParameter, affectedYearParameter, hasleftParameter, sortedByParameter, sortedDirectionParameter);
        }
    
        public virtual ObjectResult<AnnualLeaveRpt_function_GetDetailTotal_Result> AnnualLeaveRpt_function_GetDetailTotal(Nullable<int> employeeID, Nullable<int> type, Nullable<int> affectedYear)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var affectedYearParameter = affectedYear.HasValue ?
                new ObjectParameter("AffectedYear", affectedYear) :
                new ObjectParameter("AffectedYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnnualLeaveRpt_function_GetDetailTotal_Result>("AnnualLeaveRpt_function_GetDetailTotal", employeeIDParameter, typeParameter, affectedYearParameter);
        }
    
        public virtual ObjectResult<AnnualLeaveRpt_function_GetTotal_Result> AnnualLeaveRpt_function_GetTotal(Nullable<int> employeeID, Nullable<int> affectedYear)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var affectedYearParameter = affectedYear.HasValue ?
                new ObjectParameter("AffectedYear", affectedYear) :
                new ObjectParameter("AffectedYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnnualLeaveRpt_function_GetTotal_Result>("AnnualLeaveRpt_function_GetTotal", employeeIDParameter, affectedYearParameter);
        }
    }
}
