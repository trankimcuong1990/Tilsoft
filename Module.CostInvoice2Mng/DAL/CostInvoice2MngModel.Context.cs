//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Module.CostInvoice2Mng.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CostInvoice2MngEntities : DbContext
    {
        public CostInvoice2MngEntities()
            : base("name=CostInvoice2MngEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CostInvoice2> CostInvoice2 { get; set; }
        public virtual DbSet<CostInvoice2Client> CostInvoice2Client { get; set; }
        public virtual DbSet<CostInvoice2Creditor> CostInvoice2Creditor { get; set; }
        public virtual DbSet<CostInvoice2Factory> CostInvoice2Factory { get; set; }
        public virtual DbSet<CostInvoice2Type> CostInvoice2Type { get; set; }
        public virtual DbSet<CostInvoice2Mng_CostInvoice2_View> CostInvoice2Mng_CostInvoice2_View { get; set; }
        public virtual DbSet<CostInvoice2Mng_CostInvoice2Client_View> CostInvoice2Mng_CostInvoice2Client_View { get; set; }
        public virtual DbSet<CostInvoice2Mng_CostInvoice2Factory_View> CostInvoice2Mng_CostInvoice2Factory_View { get; set; }
        public virtual DbSet<CostInvoice2Mng_CostInvoice2Creditor_View> CostInvoice2Mng_CostInvoice2Creditor_View { get; set; }
        public virtual DbSet<CostInvoice2Mng_CostInvoice2Type_View> CostInvoice2Mng_CostInvoice2Type_View { get; set; }
        public virtual DbSet<CostInvoice2Mng_CostInvoice2SearchResult_View> CostInvoice2Mng_CostInvoice2SearchResult_View { get; set; }
    
        public virtual ObjectResult<CostInvoice2Mng_CostInvoice2SearchResult_View> CostInvoice2Mng_function_SearchResultCostInvoice2(string season, string costInvoice2CreditorUD, Nullable<int> costInvoice2TypeID, string relatedDocumentNo, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> paymentDate, Nullable<int> isPaid, string orderBy, string orderDirection)
        {
            var seasonParameter = season != null ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(string));
    
            var costInvoice2CreditorUDParameter = costInvoice2CreditorUD != null ?
                new ObjectParameter("CostInvoice2CreditorUD", costInvoice2CreditorUD) :
                new ObjectParameter("CostInvoice2CreditorUD", typeof(string));
    
            var costInvoice2TypeIDParameter = costInvoice2TypeID.HasValue ?
                new ObjectParameter("CostInvoice2TypeID", costInvoice2TypeID) :
                new ObjectParameter("CostInvoice2TypeID", typeof(int));
    
            var relatedDocumentNoParameter = relatedDocumentNo != null ?
                new ObjectParameter("RelatedDocumentNo", relatedDocumentNo) :
                new ObjectParameter("RelatedDocumentNo", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderDirectionParameter = orderDirection != null ?
                new ObjectParameter("OrderDirection", orderDirection) :
                new ObjectParameter("OrderDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CostInvoice2Mng_CostInvoice2SearchResult_View>("CostInvoice2Mng_function_SearchResultCostInvoice2", seasonParameter, costInvoice2CreditorUDParameter, costInvoice2TypeIDParameter, relatedDocumentNoParameter, invoiceNoParameter, invoiceDateParameter, dueDateParameter, paymentDateParameter, isPaidParameter, orderByParameter, orderDirectionParameter);
        }
    
        public virtual ObjectResult<CostInvoice2Mng_CostInvoice2SearchResult_View> CostInvoice2Mng_function_SearchResultCostInvoice2(string season, string costInvoice2CreditorUD, Nullable<int> costInvoice2TypeID, string relatedDocumentNo, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> paymentDate, Nullable<int> isPaid, string orderBy, string orderDirection, MergeOption mergeOption)
        {
            var seasonParameter = season != null ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(string));
    
            var costInvoice2CreditorUDParameter = costInvoice2CreditorUD != null ?
                new ObjectParameter("CostInvoice2CreditorUD", costInvoice2CreditorUD) :
                new ObjectParameter("CostInvoice2CreditorUD", typeof(string));
    
            var costInvoice2TypeIDParameter = costInvoice2TypeID.HasValue ?
                new ObjectParameter("CostInvoice2TypeID", costInvoice2TypeID) :
                new ObjectParameter("CostInvoice2TypeID", typeof(int));
    
            var relatedDocumentNoParameter = relatedDocumentNo != null ?
                new ObjectParameter("RelatedDocumentNo", relatedDocumentNo) :
                new ObjectParameter("RelatedDocumentNo", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderDirectionParameter = orderDirection != null ?
                new ObjectParameter("OrderDirection", orderDirection) :
                new ObjectParameter("OrderDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CostInvoice2Mng_CostInvoice2SearchResult_View>("CostInvoice2Mng_function_SearchResultCostInvoice2", mergeOption, seasonParameter, costInvoice2CreditorUDParameter, costInvoice2TypeIDParameter, relatedDocumentNoParameter, invoiceNoParameter, invoiceDateParameter, dueDateParameter, paymentDateParameter, isPaidParameter, orderByParameter, orderDirectionParameter);
        }
    }
}
